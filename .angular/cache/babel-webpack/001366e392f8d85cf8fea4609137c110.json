{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Margo/Documents/foodlab-front-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { map } from \"rxjs/operators\";\nimport { Recipe } from \"../../models/recipe/recipe\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RecipeService {\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n\n  jsonToRecipe(json) {\n    console.log(json);\n    let recipe = new Recipe(json.name, json.author, json.guestsNumber, json.recipeCategory.id);\n    recipe.id = json.id;\n    recipe.recipeCategoryName = json.recipeCategory.name;\n\n    if (json.recipeExecutionId != null) {\n      recipe.recipeExecutionId = json.recipeExecutionId;\n    }\n\n    console.log(recipe.recipeExecutionId);\n    return recipe;\n  }\n\n  selectRecipe(selectedRecipe) {\n    this.currentRecipe = selectedRecipe;\n  }\n\n  getOneRecipe(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.httpService.get(`http://localhost:3000/recipe/${id}`).pipe(map(json => _this.jsonToRecipe(json)));\n    })();\n  }\n\n  getAllRecipes() {\n    return this.httpService.get(\"http://localhost:3000/recipe\").pipe(map(data => data.map(json => this.jsonToRecipe(json))));\n  }\n\n  createRecipe(recipe) {\n    return this.httpService.post(\"http://localhost:3000/recipe\", recipe);\n  }\n\n  deleteRecipe(id) {\n    return this.httpService.delete(`http://localhost:3000/recipe/${id}`);\n  }\n\n}\n\nRecipeService.ɵfac = function RecipeService_Factory(t) {\n  return new (t || RecipeService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nRecipeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RecipeService,\n  factory: RecipeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Margo/Documents/foodlab-front-web/src/app/services/recipe/recipe.service.ts"],"names":["map","Recipe","i0","i1","RecipeService","constructor","httpService","jsonToRecipe","json","console","log","recipe","name","author","guestsNumber","recipeCategory","id","recipeCategoryName","recipeExecutionId","selectRecipe","selectedRecipe","currentRecipe","getOneRecipe","get","pipe","getAllRecipes","data","createRecipe","post","deleteRecipe","delete","ɵfac","RecipeService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,SAAKA,WAAL,GAAmBA,WAAnB;AACH;;AACDC,EAAAA,YAAY,CAACC,IAAD,EAAO;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAIG,MAAM,GAAG,IAAIV,MAAJ,CAAWO,IAAI,CAACI,IAAhB,EAAsBJ,IAAI,CAACK,MAA3B,EAAmCL,IAAI,CAACM,YAAxC,EAAsDN,IAAI,CAACO,cAAL,CAAoBC,EAA1E,CAAb;AACAL,IAAAA,MAAM,CAACK,EAAP,GAAYR,IAAI,CAACQ,EAAjB;AACAL,IAAAA,MAAM,CAACM,kBAAP,GAA4BT,IAAI,CAACO,cAAL,CAAoBH,IAAhD;;AACA,QAAIJ,IAAI,CAACU,iBAAL,IAA0B,IAA9B,EAAoC;AAChCP,MAAAA,MAAM,CAACO,iBAAP,GAA2BV,IAAI,CAACU,iBAAhC;AACH;;AACDT,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACO,iBAAnB;AACA,WAAOP,MAAP;AACH;;AACDQ,EAAAA,YAAY,CAACC,cAAD,EAAiB;AACzB,SAAKC,aAAL,GAAqBD,cAArB;AACH;;AACKE,EAAAA,YAAY,CAACN,EAAD,EAAK;AAAA;;AAAA;AACnB,mBAAa,KAAI,CAACV,WAAL,CAAiBiB,GAAjB,CAAsB,gCAA+BP,EAAG,EAAxD,EAA2DQ,IAA3D,CAAgExB,GAAG,CAACQ,IAAI,IAAI,KAAI,CAACD,YAAL,CAAkBC,IAAlB,CAAT,CAAnE,CAAb;AADmB;AAEtB;;AACDiB,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKnB,WAAL,CAAiBiB,GAAjB,CAAqB,8BAArB,EAAqDC,IAArD,CAA0DxB,GAAG,CAAC0B,IAAI,IAAIA,IAAI,CAAC1B,GAAL,CAASQ,IAAI,IAAI,KAAKD,YAAL,CAAkBC,IAAlB,CAAjB,CAAT,CAA7D,CAAP;AACH;;AACDmB,EAAAA,YAAY,CAAChB,MAAD,EAAS;AACjB,WAAO,KAAKL,WAAL,CAAiBsB,IAAjB,CAAsB,8BAAtB,EAAsDjB,MAAtD,CAAP;AACH;;AACDkB,EAAAA,YAAY,CAACb,EAAD,EAAK;AACb,WAAO,KAAKV,WAAL,CAAiBwB,MAAjB,CAAyB,gCAA+Bd,EAAG,EAA3D,CAAP;AACH;;AA7BsB;;AA+B3BZ,aAAa,CAAC2B,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI7B,aAAV,EAAyBF,EAAE,CAACgC,QAAH,CAAY/B,EAAE,CAACgC,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACA/B,aAAa,CAACgC,KAAd,GAAsB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElC,aAAT;AAAwBmC,EAAAA,OAAO,EAAEnC,aAAa,CAAC2B,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import { map } from \"rxjs/operators\";\r\nimport { Recipe } from \"../../models/recipe/recipe\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class RecipeService {\r\n    constructor(httpService) {\r\n        this.httpService = httpService;\r\n    }\r\n    jsonToRecipe(json) {\r\n        console.log(json);\r\n        let recipe = new Recipe(json.name, json.author, json.guestsNumber, json.recipeCategory.id);\r\n        recipe.id = json.id;\r\n        recipe.recipeCategoryName = json.recipeCategory.name;\r\n        if (json.recipeExecutionId != null) {\r\n            recipe.recipeExecutionId = json.recipeExecutionId;\r\n        }\r\n        console.log(recipe.recipeExecutionId);\r\n        return recipe;\r\n    }\r\n    selectRecipe(selectedRecipe) {\r\n        this.currentRecipe = selectedRecipe;\r\n    }\r\n    async getOneRecipe(id) {\r\n        return await this.httpService.get(`http://localhost:3000/recipe/${id}`).pipe(map(json => this.jsonToRecipe(json)));\r\n    }\r\n    getAllRecipes() {\r\n        return this.httpService.get(\"http://localhost:3000/recipe\").pipe(map(data => data.map(json => this.jsonToRecipe(json))));\r\n    }\r\n    createRecipe(recipe) {\r\n        return this.httpService.post(\"http://localhost:3000/recipe\", recipe);\r\n    }\r\n    deleteRecipe(id) {\r\n        return this.httpService.delete(`http://localhost:3000/recipe/${id}`);\r\n    }\r\n}\r\nRecipeService.ɵfac = function RecipeService_Factory(t) { return new (t || RecipeService)(i0.ɵɵinject(i1.HttpClient)); };\r\nRecipeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RecipeService, factory: RecipeService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}